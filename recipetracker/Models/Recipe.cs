/*
 * Recipe Tracker - OpenAPI 3.0
 *
 * This is a simple API for keeping track of recipes and their ingredients. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// A recipe
    /// </summary>
    [DataContract]
    public partial class Recipe : IEquatable<Recipe>
    {
        /// <summary>
        /// reference id of the recipe
        /// </summary>
        /// <value>reference id of the recipe</value>

        [DataMember(Name = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the Recipe.
        /// </summary>
        /// <value>The name of the Recipe.</value>
        [Required]

        [DataMember(Name = "name")]
        public string? Name { get; set; }

        /// <summary>
        /// When the recipe was created.
        /// </summary>
        /// <value>When the recipe was created.</value>

        [DataMember(Name = "dateCreated")]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Where the recipe is from. A book, website etc.
        /// </summary>
        /// <value>Where the recipe is from. A book, website etc.</value>

        [DataMember(Name = "source")]
        public string? Source { get; set; }

        /// <summary>
        /// Gets or Sets Ingredients
        /// </summary>

        [DataMember(Name = "ingredients")]
        public List<Ingredient>? Ingredients { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>

        [DataMember(Name = "labels")]
        public List<Label>? Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recipe {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Ingredients: ").Append(Ingredients).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Recipe)obj);
        }

        /// <summary>
        /// Returns true if Recipe instances are equal
        /// </summary>
        /// <param name="other">Instance of Recipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recipe other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) &&
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) &&
                (
                    Ingredients == other.Ingredients ||
                    Ingredients != null &&
                    Ingredients.SequenceEqual(other.Ingredients)
                ) &&
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                if (Ingredients != null)
                    hashCode = hashCode * 59 + Ingredients.GetHashCode();
                if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Recipe left, Recipe right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Recipe left, Recipe right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
