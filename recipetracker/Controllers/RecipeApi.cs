/*
 * Recipe Tracker - OpenAPI 3.0
 *
 * This is a simple API for keeping track of recipes and their ingredients. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using recipetracker.Services;
using Swashbuckle.AspNetCore.Annotations;

namespace IO.Swagger.Controllers
{

    [ApiController]
    public class RecipeApiController : ControllerBase
    {
        private readonly ILogger<RecipeApiController> _logger;
        private readonly IRecipeService _recipeService;

        public RecipeApiController(ILogger<RecipeApiController> logger, IRecipeService recipeService)
        {
            _logger = logger;
            _recipeService = recipeService;
            
        }

        /// <summary>
        /// Create a new recipe.
        /// </summary>
        /// <remarks>Create a new recipe.</remarks>
        /// <param name="body">The new recipe to create.</param>
        /// <response code="201">Successfully created recipe.</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/recipe")]
        [SwaggerOperation("CreateRecipe")]
        public virtual IActionResult CreateRecipe([FromBody] Recipe body)
        {

            _recipeService.CreateRecipe(body);

            return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

        }

        /// <summary>
        /// Delete a recipe by Id.
        /// </summary>
        /// <remarks>Delete a recipe by its Id.</remarks>
        /// <param name="id"></param>
        /// <response code="202">Successfully deleted recipe.</response>
        [HttpDelete]
        [Route("/recipe/{id}")]
        [SwaggerOperation("DeleteRecipeById")]
        public virtual IActionResult DeleteRecipeById([FromRoute][Required] int id)
        {
            _recipeService.DeleteRecipeById(id);
            return StatusCode(202);
        }

        /// <summary>
        /// Get a recipe by Id.
        /// </summary>
        /// <remarks>Get a recipe by its Id.</remarks>
        /// <param name="id"></param>
        /// <response code="200">Successfully found recipe.</response>
        /// <response code="404">Recipe not found</response>
        [HttpGet]
        [Route("/recipe/{id}")]
        [SwaggerOperation("GetRecipeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Recipe), description: "Successfully found recipe.")]
        public virtual IActionResult GetRecipeById([FromRoute][Required] int id)
        {

            return Ok(_recipeService.GetRecipeById(id));
        }

        /// <summary>
        /// Update an existing recipe
        /// </summary>
        /// <remarks>Update an existing recipe by Id</remarks>
        /// <param name="body">Update an existing recipe in the store</param>
        /// <response code="200">Successfully updated recipe.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Recipe not found</response>
        [HttpPut]
        [Route("/recipe")]
        [SwaggerOperation("UpdateRecipe")]
        [SwaggerResponse(statusCode: 200, type: typeof(Recipe), description: "Successfully updated recipe.")]
        public virtual IActionResult UpdateRecipe([FromBody] Recipe body)
        {
            return Ok(_recipeService.UpdateRecipe(body));
        }
    }
}
